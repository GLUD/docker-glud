version: '3.1'

services:
  nginx:
    image: nginx:alpine
    labels:
      - "com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy"    
      - "org.glud.nginx_proxy=true"
    ports:
      - 80:80
      - 443:443
    volumes:
      - server-data:/etc/nginx/conf.d:ro
      - certs:/etc/nginx/certs:ro #TODO: usar secrets (para entornos distribuidos)
      - vhosts:/etc/nginx/vhost.d:ro
      - html:/usr/share/nginx/html:ro
      - cache:/var/cache/nginx/default
    networks:
      - reverse_proxy
      - backend
    depends_on:
      - dockergen
    deploy:
      replicas: 2
      restart_policy:
        condition: any
        delay: 5s
      placement:
        constraints: [node.hostname == glud.udistrital.edu.co]


  dockergen:
    image: helder/docker-gen
    command: -notify "docker-label-sighup org.glud.nginx_proxy" -wait 10s:30s -watch /etc/docker-gen/templates/nginx.tmpl /etc/nginx/conf.d/default.conf
    labels:
      - "com.github.jrcs.letsencrypt_nginx_proxy_companion.docker_gen"
#    environment:
#      - ENABLE_IPV6=true
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - ./nginx.tmpl:/etc/docker-gen/templates/nginx.tmpl:ro
      - server-data:/etc/nginx/conf.d:rw
      - vhosts:/etc/nginx/vhost.d:rw
      - html:/usr/share/nginx/html:rw
      - certs:/etc/nginx/certs:ro #TODO: usar secrets (para entornos distribuidos)
    networks:
      - backend
      - reverse_proxy
    deploy:
      replicas: 1
      restart_policy:
        condition: any
        delay: 5s
      placement:
        constraints: [node.role == manager]

  proxy-companion:
    image: jrcs/letsencrypt-nginx-proxy-companion
    volumes:
      - certs:/etc/nginx/certs:rw
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - vhosts:/etc/nginx/vhost.d:rw
      - html:/usr/share/nginx/html:rw
      - server-data:/etc/nginx/conf.d:rw
    networks:
      - backend
    depends_on:
      - dockergen
    deploy:
      replicas: 1
      restart_policy:
        condition: any
        delay: 5s       
      placement:
        constraints: [node.role == manager]

#  whoami:
#    image: jwilder/whoami
#    environment:
#      - VIRTUAL_HOST=whoami.local
#    networks:
#      - proxy

networks:
  reverse_proxy:
    external: true
  backend:

volumes:
  server-data:
  certs:
  html:
  vhosts:
  cache:
  

#secrets:
  
